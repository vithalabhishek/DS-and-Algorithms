class ListNode {
      int val;
      ListNode next;
      ListNode() {}
      ListNode(int val) { this.val = val; }
      ListNode(int val, ListNode next) { this.val = val; this.next = next; }
  }

class mergetwosortedlinkedlist {
    public static ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        if (list1 == null) return list2;
        if (list2 == null) return list1;
        if (list1.val > list2.val) {
            ListNode temp = list1;
            list1 = list2;
            list2 = temp;
        }

        ListNode res = list1;
        while (list1 != null && list2 != null) {
            ListNode tmp = null;
            while (list1 != null && list1.val <= list2.val) {
                tmp = list1;
                list1 = list1.next;
            }
            tmp.next = list2;
            //swap
            ListNode temp = list1;
            list1 = list2;
            list2 = temp;
        }
        return res;
    }

    public static void displayanswer(ListNode res)
    {
        while(res != null)
        {
            System.out.println(res.val);
            res = res.next;

        }
    }

    public static void main(String args[]) {
        ListNode head1 = new ListNode(1);
        head1.next = new ListNode(3);
        head1.next.next = new ListNode(5);

        // 1.3.5 LinkedList created

        ListNode head2 = new ListNode(0);
        head2.next = new ListNode(2);
        head2.next.next = new ListNode(4);

        // 0.2.4 LinkedList created

        ListNode mergedhead = mergeTwoLists(head1, head2);
        displayanswer(mergedhead);
    }
}

