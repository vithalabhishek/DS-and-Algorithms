https://www.youtube.com/watch?v=l0YC3876qxg&list=PLgUwDviBIf0rPG3Ictpu74YWBQ1CaBkm2&index=14

https://leetcode.com/problems/powx-n/

Brute Force Approach :

class Solution {
    public double myPow(double x, int n) {
        long nn = n;
        if(nn == 0) return 1.00000;
        if(nn > 0)
        {
            double ans = x;
            for (int i = 0; i< n - 1 ; i++)
                ans = ans * x;
            return ans;
        }
        else{
            double answer = x;
            for (int i = 0; i< Math.abs(n) - 1;i++)
                answer = answer * x;
            answer = (double)(1.0)/(double)answer;
            return answer;
        }
    }
}
Result : TLE . For test case : 1.00000  2147483647


Optimal Solution:

class Solution {
    public double myPow(double x, int n) {
       double ans = 1.0;
       long nn = n;
       if(nn < 0) nn = -1 * nn;
       while(nn > 0){
          if(nn % 2 == 1){
            ans = ans * x;
            nn = nn - 1;
        }
          else{
            x = x * x;
            nn = nn/2;
        }
        }
        if(n < 0) ans = (double)(1.0)/(double)ans;
        return ans;
    }
