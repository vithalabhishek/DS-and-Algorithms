https://leetcode.com/problems/search-a-2d-matrix/

https://www.youtube.com/watch?v=ZYpYur0znng&list=PLgUwDviBIf0rPG3Ictpu74YWBQ1CaBkm2&index=13

https://www.geeksforgeeks.org/search-in-row-wise-and-column-wise-sorted-matrix/

https://practice.geeksforgeeks.org/problems/search-in-a-matrix17201720/1/

GFG Optimal Solution :

int matSearch (int N, int M, int matrix[][M], int x)
{
    int i = 0, j = M-1;
    
    while(i < N && j >= 0){
        if(matrix[i][j] == x)
            //System.out.println(x + "is present in the matrix at" + (i+j) + "th cell");
            return 1;
        else if(matrix[i][j] > x)
            j--;
        else
            i++;
    }
    return 0;
}

Leetcode better solution(Same as GFG) :

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        //Better Solution for Leetcode
        int i = 0, j = matrix[0].length - 1;
        while(i < matrix.length && j >= 0){
            if(matrix[i][j] == target)
                return true;
            else if(matrix[i][j] > target)
                j--;
            else
                i++;
        }
        return false;
        
    }
}

Optimal Solution for Leetcode

class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        //Optimal Solution for Leetcode
        if(matrix.length == 0) return false;
        
        int n = matrix.length, m = matrix[0].length;
        
        int low = 0, high = (n * m) - 1;
        //Applying binary search
        while(low <= high){
            int mid = (low + high)/2;
            if(matrix[mid/m][mid % m] == target) //mid/m gives row and mid % m give column
                return true;
            else if(matrix[mid/m][mid % m] > target)
                high = mid - 1;
            else
                low = mid + 1;
        }
        return false;
    }
}
